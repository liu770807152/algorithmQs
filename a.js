/**
 *  第350题：两个数组的交集
    给定两个数组，编写一个函数来计算它们的交集。

    示例 1:
    输入: nums1 = [1,2,2,1], nums2 = [2,2]
    输出: [2,2]

    示例 2:
    输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
    输出: [4,9]

    说明：
    输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
    我们可以不考虑输出结果的顺序。

    进阶:
    如果给定的数组已经排好序呢？将如何优化你的算法呢？

    思路：设定两个为0的指针，比较两个指针的元素是否相等。如果指针的元素相等，我们将两个指针一
    起向后移动，并且将相等的元素放入空白数组
 */

// 首先拿到这道题，我们基本马上可以想到，
// 此题可以看成是一道传统的映射题（map映射），为
// 什么可以这样看呢，因为我们需找出两个数组的交集元素，
// 同时应与两个数组中出现的次数一致。
// 这样就导致了我们需要知道每个值出现的次数，
// 所以映射关系就成了<元素,出现次数>。剩下的就是顺利成章的解题。

function intersect(nums1, nums2) {
    // 也可以用set
    let m0 = new Map();
    for (let num of nums1) {
        if (m0.has(num)) {
            const cur = m0.get(num);
            m0.set(num, cur+1);
        } else {
            m0.set(num, 1);
        }
    }
    let k = 0;
    for (let num of nums2) {
        if (m0.get(num) > 0) {
            let cur = m0.get(num);
            m0.set(num, cur-1);
            nums2[k++] = num;
        }
    }
    return nums2.slice(0, k);
}

/* 
题目在进阶问题中问道：如果给定的数组已经排好序呢？
你将如何优化你的算法？我们分析一下，假如两个数组都是有序的，
分别为：arr1 = [1,2,3,4,4,13]，arr2 = [1,2,3,9,10]
对于两个已经排序好数组的题，我们可以很容易想到使用双指针的解法~
*/

// 解题步骤如下：
//<1> 设定两个为0的指针，比较两个指针的元素是否相等。
//如果指针的元素相等，我们将两个指针一起向后移动，
//并且将相等的元素放入空白数组。下图中我们的指针分别指向
//第一个元素，判断元素相等之后，将相同元素放到空白的数组。
//<2> 如果两个指针的元素不相等，我们将小的一个指针后移。
//<3> 反复以上步骤。

function intersect2(nums1, nums2) {
    let i = 0, j = 0;
    const result = [];
    while (i < nums1.length && j < nums2.length) {
        if (nums1[i] === nums2[j]) {
            result.push(nums1[i])
            i++; 
            j++;
        } else if (nums1[i] < nums2[j]) {
            i++;
        } else {
            j++;
        }
    }
    return result;
}

console.log(intersect([1, 2, 2, 3], [6, 2, 2, 1, 0]));
console.log(intersect([1, 2, 2, 3], [0, 1, 2, 4]));